name: 'High-Signal PR Code Review'

on:
  issue_comment:
    types: [created]

jobs:
  pr-code-review:
    name: 'Automated Code Review with Inline Comments'
    runs-on: ubuntu-latest
    
    # Only run when comment contains /code_review on a pull request
    if: >
      (github.event_name == 'issue_comment' && 
       github.event.issue.pull_request &&
       contains(github.event.comment.body, '/code_review'))
    
    permissions:
      contents: read
      pull-requests: write
      issues: read
    
    outputs:
      initial-comment-id: ${{ steps.initial-comment.outputs.comment-id }}
    
    steps:
      - name: Post initial status comment
        id: initial-comment
        uses: actions/github-script@v7
        env:
          PR_NUMBER: ${{ github.event.issue.number }}
        with:
          script: |
            const prNumber = parseInt(process.env.PR_NUMBER || '');
            if (isNaN(prNumber) || prNumber <= 0) {
              throw new Error('Invalid PR number');
            }
            const comment = await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `🤖 **Automated Code Review Started**
              
            ⏳ Code review is now running... This typically takes 2-3 minutes.`
            });
            
            // Store the comment ID for later use
            core.setOutput('comment-id', comment.data.id);
            return comment.data.id;

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better context analysis

      - name: Set PR context variables
        id: pr-context
        run: |
          echo "pr_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          echo "trigger_type=manual" >> $GITHUB_OUTPUT
          echo "repo_owner=${{ github.repository_owner }}" >> $GITHUB_OUTPUT
          echo "repo_name=${{ github.event.repository.name }}" >> $GITHUB_OUTPUT

      - name: Run High-Signal Code Review
        uses: ./.github/actions/qodo-code-review
        with:
          prompt: |
            Perform high-signal automated code review for PR #${{ steps.pr-context.outputs.pr_number }} 
            in ${{ steps.pr-context.outputs.repo_owner }}/${{ steps.pr-context.outputs.repo_name }}
          agent-file: 'agents/pr-high-signal-reviewer.toml'
          key-value-pairs: |
            pr_number=${{ steps.pr-context.outputs.pr_number }}
            repo_owner=${{ steps.pr-context.outputs.repo_owner }}
            repo_name=${{ steps.pr-context.outputs.repo_name }}
            severity_threshold=medium
            focus_areas=security,performance,bugs,architecture
            review_scope=changed_lines_only
            use_repository_context=true
            signal_to_noise_priority=high
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          QODO_API_KEY: ${{ secrets.QODO_API_KEY }}

  # Fallback job for error handling and notifications
  review-status:
    name: 'Review Status Update'
    runs-on: ubuntu-latest
    needs: pr-code-review
    if: failure() || success()
    
    permissions:
      pull-requests: write
      issues: write
    
    steps:
      - name: Update or remove initial status comment
        uses: actions/github-script@v7
        env:
          PR_NUMBER: ${{ github.event.issue.number }}
          REVIEW_RESULT: ${{ needs.pr-code-review.result }}
          INITIAL_COMMENT_ID: ${{ needs.pr-code-review.outputs.initial-comment-id }}
        with:
          script: |
            const prNumber = parseInt(process.env.PR_NUMBER || '');
            if (isNaN(prNumber) || prNumber <= 0) {
              throw new Error('Invalid PR number');
            }
            const reviewSuccess = process.env.REVIEW_RESULT === 'success';
            const rawInitialId = process.env.INITIAL_COMMENT_ID || '';
            const initialCommentId = rawInitialId && !isNaN(parseInt(rawInitialId)) ? parseInt(rawInitialId) : null;
            
            if (reviewSuccess) {
              if (initialCommentId) {
                try {
                  await github.rest.issues.deleteComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: initialCommentId
                  });
                  console.log('✅ Deleted initial status comment - review completed successfully');
                } catch (error) {
                  console.log('⚠️ Could not delete initial comment:', error.message);
                }
              }
            } else {
              if (initialCommentId) {
                try {
                  const repoUrl = context.payload.repository?.html_url;
                  const runId = context.runId;
                  if (!repoUrl || !runId) {
                    throw new Error('Missing required context information');
                  }
                  const workflowUrl = `${repoUrl}/actions/runs/${runId}`;
                  
                  await github.rest.issues.updateComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: initialCommentId,
                    body: `🤖 **Automated Code Review Status**
                      
            ❌ The automated code review encountered an issue and could not complete.

            **Possible causes:**
            - API rate limits
            - Network connectivity issues  
            - Large PR size exceeding analysis limits
            - Repository access permissions

            **Next steps:**
            - Check the [workflow logs](${workflowUrl}) for details
            - Try triggering manually with \\\`/code_review\\\` comment
            - Contact maintainers if the issue persists

            The review will be retried automatically on the next PR update.`
                  });
                  console.log('⚠️ Updated initial comment with error status');
                } catch (error) {
                  console.log('⚠️ Could not update initial comment, posting new comment instead');
                  // Fallback: post a new comment if updating fails
                  const repoUrl = context.payload.repository?.html_url;
                  const runId = context.runId;
                  if (!repoUrl || !runId) {
                    throw new Error('Missing required context information');
                  }
                  const workflowUrl = `${repoUrl}/actions/runs/${runId}`;
                  
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: prNumber,
                    body: `🤖 **Automated Code Review Status**
                      
            ❌ The automated code review encountered an issue and could not complete.

            **Possible causes:**
            - API rate limits
            - Network connectivity issues  
            - Large PR size exceeding analysis limits
            - Repository access permissions

            **Next steps:**
            - Check the [workflow logs](${workflowUrl}) for details
            - Try triggering manually with \\\`/code_review\\\` comment
            - Contact maintainers if the issue persists

            The review will be retried automatically on the next PR update.`
                  });
                }
              } else {
                // No valid initial comment id; post a new comment directly
                const repoUrl = context.payload.repository?.html_url;
                const runId = context.runId;
                if (!repoUrl || !runId) {
                  throw new Error('Missing required context information');
                }
                const workflowUrl = `${repoUrl}/actions/runs/${runId}`;
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: `🤖 **Automated Code Review Status**
                      
            ❌ The automated code review encountered an issue and could not complete.

            **Possible causes:**
            - API rate limits
            - Network connectivity issues  
            - Large PR size exceeding analysis limits
            - Repository access permissions

            **Next steps:**
            - Check the [workflow logs](${workflowUrl}) for details
            - Try triggering manually with \\\`/code_review\\\` comment
            - Contact maintainers if the issue persists

            The review will be retried automatically on the next PR update.`
                });
              }
            }

  # Optional: Summary job for analytics and metrics
  review-metrics:
    name: 'Review Metrics Collection'
    runs-on: ubuntu-latest
    needs: pr-code-review
    if: success()
    
    steps:
      - name: Collect review metrics
        run: |
          echo "📊 Review Metrics:"
          echo "- PR Number: ${{ github.event.issue.number }}"
          echo "- Repository: ${{ github.repository }}"
          echo "- Trigger: ${{ github.event_name }}"
          echo "- Timestamp: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          echo "- Workflow Run: ${{ github.run_id }}"
          
          # Future: Could send metrics to analytics service
          # curl -X POST "https://analytics.example.com/code-review-metrics" \
          #   -H "Content-Type: application/json" \
          #   -d '{"pr": "${{ github.event.issue.number }}", "repo": "${{ github.repository }}", "success": true}'